#######################################################################
#                            Rust AtCoder Snippets                            #
#######################################################################

priority -50

snippet template "use proconio" b
use proconio::*;

#[allow(non_snake_case)]
fn main() {
	input! {
		${0}
	}
}
endsnippet

snippet power_ab "power(a, b)" b
fn power_ab(a: ${1:usize}, b: $1, modulo: $1) -> $1 {
	// 2進数に展開する
	let mut ans = 1;
	let mut p = a;
	let bitwidth = f64::log2(b as f64) as usize + 1;
	for j in 0..bitwidth {
		if (b >> j) % 2 == 1 {
			ans *= p;
			ans %= modulo
		}
		p *= p;
		p %= modulo;
	}
	ans
}
endsnippet

snippet gcd "gcd(a, b)" b
fn gcd(a: usize, b: usize) -> usize {
	let (x, y) = if a >= b {
		(a, b)
	} else {
		(b, a)
	};

	if y == 0 {
		x
	} else {
		gcd(y, x % y)
	}
}
endsnippet

snippet adj "let mut adj = {}" b
type AdjList = BTreeMap<usize, Vec<usize>>;
let mut ${1:adj} = AdjList::new();
for (${2:a}, ${3:b}) in ${4:ab} {
	$1.entry($2).or_default().push($3);
	$1.entry($3).or_default().push($2);
}
${0}
endsnippet

snippet ijiter "h x w mass" b
for i in ${1:0..h} {
	for j in ${2:0..w} {
		${0}
	}
}
endsnippet

snippet bsbk_cmp "cmp for monotonically increasing" b
let cmp = |${1:b}: usize| { move |v: &usize| {
	if v > &$1 {
		std::cmp::Ordering::Greater
	} else {
		std::cmp::Ordering::Less
	}
}};
endsnippet

snippet bsbk "binary search by key" b
match ${1:a}.binary_search_by(|v| {
	if v == ${2:&b} {
		std::cmp::Ordering::Equal
	} else if v > $2 {
		std::cmp::Ordering::Greater
	} else {
		std::cmp::Ordering::Less
	}
}) {
	Ok(idx) => ${3},
	Err(idx) => ${4},
}
endsnippet


snippet dikstra "" b
endsnippet

snippet allpathsearch "all path search with permutations in graph" b
for path in (1..=n).permutations(n) {
	// 経路コスト
	let mut sum = 0;
	for edge in path.windows(2) {
		// 双方向であるため
		if let Some(c) = hm.get(&(edge[0].min(edge[1]), edge[1].max(edge[0]))) {
			sum += c;
		} else {
			break;
		}
	}
	ans = ans.max(sum);
}
endsnippet

snippet scc "SCC Graph" b
mod scc {
use std::collections::BTreeMap;
type Adj = BTreeMap<usize, Vec<usize>>;
pub struct SccGraph {
	n: usize,
	adj: Adj,
	adj_rev: Adj,
}
impl SccGraph {
	pub fn new(n: usize) -> Self {
		SccGraph {
			n,
			adj: Adj::new(),
			adj_rev: Adj::new(),
		}
	}
	pub fn add_edge(&mut self, a: usize, b: usize) {
		self.adj.entry(a).or_default().push(b);
		self.adj_rev.entry(b).or_default().push(a);
	}

	pub fn scc(&self) -> Vec<Vec<usize>> {
		let mut stack = Vec::new();
		let mut visited = vec![false; self.n+1];
		for i in 1..=self.n {
			self.dfs(i, &self.adj, &mut visited, &mut stack);
		}
		// strong connected componentごとにグループ化する
		let mut scc: Vec<Vec<usize>> = Vec::new();
		let mut visited = vec![false; self.n+1];
		for &i in stack.iter().rev() {
			if !visited[i] {
				let mut g = Vec::new();
				self.dfs(i, &self.adj_rev, &mut visited, &mut g);
				scc.push(g);
			}
		}
		scc
	}

	fn dfs(&self, v: usize, adj: &Adj, visited: &mut [bool], stack: &mut Vec<usize>) {
		if visited[v] { return;}
		visited[v] = true;
		if let Some(list) = adj.get(&v) {
			for &next in list {
				if !visited[next] {
					self.dfs(next, adj, visited, stack);
				}
			}
		}
		stack.push(v);
	}
}
}
endsnippet
